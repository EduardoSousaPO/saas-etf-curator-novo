#!/usr/bin/env python3
"""
Teste Abrangente do Chat Vista ETF Assistant
Valida se o chat consegue executar todas as funcionalidades manuais do app
"""

import asyncio
import json
import time
import requests
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime
import sys

# Configura√ß√£o
BASE_URL = "http://localhost:3000"
CHAT_ENDPOINT = "/api/chat/agents"

@dataclass
class ChatTestResult:
    scenario: str
    user_message: str
    expected_functionality: str
    manual_equivalent: str
    success: bool
    response_time: float
    chat_response: str
    api_calls_detected: List[str]
    educational_value: int  # 1-5 scale
    error_message: str = ""

class ComprehensiveChatTester:
    """Testador abrangente do chat Vista ETF Assistant"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.results: List[ChatTestResult] = []
        self.start_time = time.time()
    
    def log_result(self, result: ChatTestResult):
        """Registrar resultado do teste"""
        self.results.append(result)
        status = "‚úÖ PASSOU" if result.success else "‚ùå FALHOU"
        print(f"{status} | {result.scenario}")
        print(f"   Pergunta: {result.user_message}")
        print(f"   Equivalente Manual: {result.manual_equivalent}")
        print(f"   Tempo: {result.response_time:.2f}s")
        if not result.success and result.error_message:
            print(f"   Erro: {result.error_message}")
        print()
    
    def test_chat_message(self, scenario: str, user_message: str, 
                         expected_functionality: str, manual_equivalent: str,
                         expected_apis: List[str] = None) -> ChatTestResult:
        """Testar uma mensagem do chat"""
        start_time = time.time()
        
        try:
            response = requests.post(
                f"{self.base_url}{CHAT_ENDPOINT}",
                json={"message": user_message, "user_id": "test_comprehensive"},
                timeout=30
            )
            
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                # Processar resposta (pode ser streaming)
                response_text = response.text
                
                # Avaliar se a resposta indica sucesso
                success = self.evaluate_chat_response(response_text, expected_functionality)
                
                # Detectar APIs chamadas (baseado na resposta)
                detected_apis = self.detect_api_calls(response_text)
                
                # Avaliar valor educativo
                educational_value = self.evaluate_educational_value(response_text)
                
                return ChatTestResult(
                    scenario=scenario,
                    user_message=user_message,
                    expected_functionality=expected_functionality,
                    manual_equivalent=manual_equivalent,
                    success=success,
                    response_time=response_time,
                    chat_response=response_text[:500] + "..." if len(response_text) > 500 else response_text,
                    api_calls_detected=detected_apis,
                    educational_value=educational_value
                )
            else:
                return ChatTestResult(
                    scenario=scenario,
                    user_message=user_message,
                    expected_functionality=expected_functionality,
                    manual_equivalent=manual_equivalent,
                    success=False,
                    response_time=response_time,
                    chat_response="",
                    api_calls_detected=[],
                    educational_value=0,
                    error_message=f"HTTP {response.status_code}: {response.text[:100]}"
                )
                
        except Exception as e:
            response_time = time.time() - start_time
            return ChatTestResult(
                scenario=scenario,
                user_message=user_message,
                expected_functionality=expected_functionality,
                manual_equivalent=manual_equivalent,
                success=False,
                response_time=response_time,
                chat_response="",
                api_calls_detected=[],
                educational_value=0,
                error_message=str(e)
            )
    
    def evaluate_chat_response(self, response: str, expected_functionality: str) -> bool:
        """Avaliar se a resposta do chat indica sucesso na funcionalidade esperada"""
        # Por enquanto, considera sucesso se n√£o h√° erro expl√≠cito
        # Em implementa√ß√£o real, analisaria o conte√∫do da resposta
        return "error" not in response.lower() and len(response) > 20
    
    def detect_api_calls(self, response: str) -> List[str]:
        """Detectar quais APIs foram chamadas baseado na resposta"""
        apis_detected = []
        
        # Palavras-chave que indicam uso de APIs espec√≠ficas
        if "screening" in response.lower() or "filtros" in response.lower():
            apis_detected.append("screener")
        if "carteira" in response.lower() or "portfolio" in response.lower():
            apis_detected.append("portfolio_master")
        if "compar" in response.lower():
            apis_detected.append("comparador")
        if "ranking" in response.lower() or "melhores" in response.lower():
            apis_detected.append("rankings")
        if "dashboard" in response.lower() or "m√©tricas" in response.lower():
            apis_detected.append("dashboard")
            
        return apis_detected
    
    def evaluate_educational_value(self, response: str) -> int:
        """Avaliar o valor educativo da resposta (1-5)"""
        educational_indicators = [
            "explica√ß√£o", "porque", "isso significa", "por exemplo",
            "risco", "retorno", "diversifica√ß√£o", "taxa", "volatilidade"
        ]
        
        count = sum(1 for indicator in educational_indicators 
                   if indicator in response.lower())
        
        return min(5, max(1, count))
    
    def run_portfolio_creation_tests(self):
        """Testes de cria√ß√£o de portfolio"""
        print("\nüéØ TESTANDO: CRIA√á√ÉO DE PORTFOLIO")
        print("=" * 60)
        
        # Teste 1: Cria√ß√£o b√°sica de carteira
        result = self.test_chat_message(
            scenario="Cria√ß√£o de Carteira B√°sica",
            user_message="Quero criar uma carteira conservadora com R$ 50.000 para aposentadoria",
            expected_functionality="Portfolio Master - Otimiza√ß√£o Markowitz",
            manual_equivalent="Ir para Portfolio Master ‚Üí Preencher formul√°rio ‚Üí Otimizar ‚Üí Revisar resultados",
            expected_apis=["portfolio_master"]
        )
        self.log_result(result)
        
        # Teste 2: Carteira com perfil espec√≠fico
        result = self.test_chat_message(
            scenario="Carteira Perfil Arrojado",
            user_message="Crie uma carteira arrojada focada em crescimento com R$ 100.000",
            expected_functionality="Portfolio Master - Sele√ß√£o por perfil de risco",
            manual_equivalent="Portfolio Master ‚Üí Selecionar 'Arrojado' ‚Üí Objetivo 'Crescimento' ‚Üí R$ 100k",
            expected_apis=["portfolio_master"]
        )
        self.log_result(result)
        
        # Teste 3: Carteira com restri√ß√µes espec√≠ficas
        result = self.test_chat_message(
            scenario="Carteira com Restri√ß√µes",
            user_message="Quero uma carteira s√≥ com ETFs de baixa taxa (menor que 0.5%) para R$ 30.000",
            expected_functionality="Portfolio Master + Screener - Filtros combinados",
            manual_equivalent="Screener ‚Üí Filtrar taxa < 0.5% ‚Üí Portfolio Master ‚Üí Usar ETFs filtrados",
            expected_apis=["screener", "portfolio_master"]
        )
        self.log_result(result)
    
    def run_etf_research_tests(self):
        """Testes de pesquisa de ETFs"""
        print("\nüîç TESTANDO: PESQUISA DE ETFs")
        print("=" * 60)
        
        # Teste 1: Busca por setor
        result = self.test_chat_message(
            scenario="Busca ETFs por Setor",
            user_message="Me mostre os melhores ETFs de tecnologia com baixa taxa de administra√ß√£o",
            expected_functionality="Screener - Filtros por setor e taxa",
            manual_equivalent="Screener ‚Üí Filtrar por 'Technology' ‚Üí Ordenar por expense ratio ‚Üí Ver resultados",
            expected_apis=["screener"]
        )
        self.log_result(result)
        
        # Teste 2: An√°lise espec√≠fica de ETF
        result = self.test_chat_message(
            scenario="An√°lise ETF Espec√≠fico",
            user_message="Analise o ETF VTI para mim, quais s√£o os pr√≥s e contras?",
            expected_functionality="Detalhes ETF + An√°lise contextual",
            manual_equivalent="Screener ‚Üí Buscar VTI ‚Üí Clicar para detalhes ‚Üí Ler m√©tricas manualmente",
            expected_apis=["screener"]
        )
        self.log_result(result)
        
        # Teste 3: Compara√ß√£o de ETFs
        result = self.test_chat_message(
            scenario="Compara√ß√£o de ETFs",
            user_message="Compare VTI, SPY e QQQ para mim, qual √© melhor para longo prazo?",
            expected_functionality="Comparador - An√°lise lado a lado",
            manual_equivalent="Comparador ‚Üí Adicionar VTI, SPY, QQQ ‚Üí Comparar m√©tricas ‚Üí Analisar manualmente",
            expected_apis=["comparador"]
        )
        self.log_result(result)
    
    def run_market_analysis_tests(self):
        """Testes de an√°lise de mercado"""
        print("\nüìä TESTANDO: AN√ÅLISE DE MERCADO")
        print("=" * 60)
        
        # Teste 1: Rankings gerais
        result = self.test_chat_message(
            scenario="Rankings de Performance",
            user_message="Quais s√£o os ETFs com melhor performance nos √∫ltimos 12 meses?",
            expected_functionality="Rankings - Best performers",
            manual_equivalent="Rankings ‚Üí Selecionar 'Best Performance' ‚Üí Ver lista dos top 15",
            expected_apis=["rankings"]
        )
        self.log_result(result)
        
        # Teste 2: An√°lise de tend√™ncias
        result = self.test_chat_message(
            scenario="An√°lise de Tend√™ncias",
            user_message="Como est√° o mercado de ETFs hoje? H√° alguma oportunidade?",
            expected_functionality="Dashboard + Rankings - Insights de mercado",
            manual_equivalent="Dashboard ‚Üí Ver m√©tricas gerais ‚Üí Rankings ‚Üí Identificar oportunidades manualmente",
            expected_apis=["dashboard", "rankings"]
        )
        self.log_result(result)
        
        # Teste 3: Setores em alta
        result = self.test_chat_message(
            scenario="Setores em Alta",
            user_message="Que setores est√£o em alta agora e quais ETFs voc√™ recomenda?",
            expected_functionality="Rankings + Screener - An√°lise setorial",
            manual_equivalent="Rankings ‚Üí Analisar por setor ‚Üí Screener ‚Üí Filtrar setores identificados",
            expected_apis=["rankings", "screener"]
        )
        self.log_result(result)
    
    def run_portfolio_management_tests(self):
        """Testes de gest√£o de portfolio"""
        print("\nüìà TESTANDO: GEST√ÉO DE PORTFOLIO")
        print("=" * 60)
        
        # Teste 1: An√°lise de portfolio existente
        result = self.test_chat_message(
            scenario="An√°lise Portfolio Existente",
            user_message="Tenho 60% VTI, 30% BND e 10% QQQ. Como posso melhorar essa carteira?",
            expected_functionality="Portfolio Master - An√°lise e otimiza√ß√£o",
            manual_equivalent="Portfolio Master ‚Üí Inserir aloca√ß√µes atuais ‚Üí Executar otimiza√ß√£o ‚Üí Comparar resultados",
            expected_apis=["portfolio_master"]
        )
        self.log_result(result)
        
        # Teste 2: Rebalanceamento
        result = self.test_chat_message(
            scenario="Sugest√£o de Rebalanceamento",
            user_message="Minha carteira desbalanceou, quando devo rebalancear e como?",
            expected_functionality="Dashboard - Monitoramento + regras de rebalanceamento",
            manual_equivalent="Dashboard ‚Üí Monitorar desvios ‚Üí Calcular quando rebalancear manualmente",
            expected_apis=["dashboard"]
        )
        self.log_result(result)
        
        # Teste 3: Adi√ß√£o de novos aportes
        result = self.test_chat_message(
            scenario="Estrat√©gia para Novos Aportes",
            user_message="Vou investir mais R$ 10.000, onde devo alocar para manter minha estrat√©gia?",
            expected_functionality="Portfolio Master - Otimiza√ß√£o incremental",
            manual_equivalent="Portfolio Master ‚Üí Simular novo aporte ‚Üí Otimizar aloca√ß√£o ‚Üí Calcular diferen√ßas",
            expected_apis=["portfolio_master"]
        )
        self.log_result(result)
    
    def run_educational_tests(self):
        """Testes de funcionalidade educativa"""
        print("\nüéì TESTANDO: FUNCIONALIDADE EDUCATIVA")
        print("=" * 60)
        
        # Teste 1: Explica√ß√£o de conceitos
        result = self.test_chat_message(
            scenario="Explica√ß√£o de Conceitos",
            user_message="O que √© Sharpe ratio e por que √© importante para meus investimentos?",
            expected_functionality="Educa√ß√£o - Gloss√°rio contextual",
            manual_equivalent="Procurar em gloss√°rio ‚Üí Ler defini√ß√£o ‚Üí Aplicar ao contexto manualmente",
            expected_apis=[]
        )
        self.log_result(result)
        
        # Teste 2: Estrat√©gias de investimento
        result = self.test_chat_message(
            scenario="Explica√ß√£o de Estrat√©gias",
            user_message="Explique a diferen√ßa entre investir em growth vs value ETFs",
            expected_functionality="Educa√ß√£o - Estrat√©gias de investimento",
            manual_equivalent="Pesquisar sobre growth vs value ‚Üí Comparar ETFs ‚Üí Entender diferen√ßas",
            expected_apis=["screener"]
        )
        self.log_result(result)
        
        # Teste 3: Riscos e diversifica√ß√£o
        result = self.test_chat_message(
            scenario="Educa√ß√£o sobre Riscos",
            user_message="Como diversificar adequadamente minha carteira para reduzir riscos?",
            expected_functionality="Educa√ß√£o + Portfolio Master - Teoria de diversifica√ß√£o",
            manual_equivalent="Estudar teoria de diversifica√ß√£o ‚Üí Portfolio Master ‚Üí Aplicar conceitos",
            expected_apis=["portfolio_master"]
        )
        self.log_result(result)
    
    def run_complex_scenarios_tests(self):
        """Testes de cen√°rios complexos"""
        print("\nüß© TESTANDO: CEN√ÅRIOS COMPLEXOS")
        print("=" * 60)
        
        # Teste 1: Jornada completa do usu√°rio
        result = self.test_chat_message(
            scenario="Jornada Completa Iniciante",
            user_message="Sou iniciante, tenho R$ 20.000 e quero come√ßar a investir em ETFs. Me ajude do zero.",
            expected_functionality="Onboarding + Portfolio Master + Educa√ß√£o",
            manual_equivalent="Onboarding ‚Üí Portfolio Master ‚Üí Screener ‚Üí Comparador ‚Üí Dashboard ‚Üí Educa√ß√£o",
            expected_apis=["portfolio_master", "screener"]
        )
        self.log_result(result)
        
        # Teste 2: Cen√°rio espec√≠fico com m√∫ltiplas funcionalidades
        result = self.test_chat_message(
            scenario="Cen√°rio Multi-funcional",
            user_message="Quero investir R$ 100k focado em dividendos, mas tamb√©m quero crescimento. Compare as op√ß√µes e monte uma carteira balanceada.",
            expected_functionality="Screener + Comparador + Portfolio Master",
            manual_equivalent="Screener (dividendos) ‚Üí Screener (growth) ‚Üí Comparador ‚Üí Portfolio Master ‚Üí Otimiza√ß√£o",
            expected_apis=["screener", "comparador", "portfolio_master"]
        )
        self.log_result(result)
        
        # Teste 3: Consultoria avan√ßada
        result = self.test_chat_message(
            scenario="Consultoria Avan√ßada",
            user_message="Tenho R$ 500k, perfil arrojado, 35 anos. Quero uma estrat√©gia completa para aposentadoria aos 55. Inclua an√°lise fiscal e rebalanceamento.",
            expected_functionality="Consultoria CVM + Portfolio Master + Planejamento",
            manual_equivalent="Consultoria CVM ‚Üí An√°lise completa ‚Üí Portfolio Master ‚Üí Planejamento fiscal ‚Üí Dashboard",
            expected_apis=["portfolio_master", "dashboard"]
        )
        self.log_result(result)
    
    def generate_comprehensive_report(self):
        """Gerar relat√≥rio abrangente dos testes"""
        total_time = time.time() - self.start_time
        
        # Estat√≠sticas gerais
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r.success)
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        avg_response_time = sum(r.response_time for r in self.results) / total_tests if total_tests > 0 else 0
        
        # An√°lise por categoria
        categories = {
            "Cria√ß√£o de Portfolio": [r for r in self.results if "Portfolio" in r.scenario and "Cria√ß√£o" in r.scenario],
            "Pesquisa de ETFs": [r for r in self.results if "Busca" in r.scenario or "An√°lise ETF" in r.scenario or "Compara√ß√£o" in r.scenario],
            "An√°lise de Mercado": [r for r in self.results if "Rankings" in r.scenario or "Tend√™ncias" in r.scenario or "Setores" in r.scenario],
            "Gest√£o de Portfolio": [r for r in self.results if "Gest√£o" in r.scenario or "Rebalance" in r.scenario or "Aportes" in r.scenario],
            "Educa√ß√£o": [r for r in self.results if "Educa√ß√£o" in r.scenario or "Explica√ß√£o" in r.scenario],
            "Cen√°rios Complexos": [r for r in self.results if "Jornada" in r.scenario or "Multi-funcional" in r.scenario or "Consultoria" in r.scenario]
        }
        
        # An√°lise de valor educativo
        avg_educational_value = sum(r.educational_value for r in self.results) / total_tests if total_tests > 0 else 0
        
        print("\n" + "=" * 80)
        print("üìä RELAT√ìRIO ABRANGENTE - TESTE DO CHAT VISTA ETF ASSISTANT")
        print("=" * 80)
        print(f"‚è±Ô∏è  Tempo Total de Execu√ß√£o: {total_time:.2f}s")
        print(f"üß™ Total de Testes: {total_tests}")
        print(f"‚úÖ Testes Aprovados: {passed_tests}")
        print(f"‚ùå Testes Falharam: {failed_tests}")
        print(f"üìà Taxa de Sucesso: {success_rate:.1f}%")
        print(f"‚ö° Tempo M√©dio de Resposta: {avg_response_time:.2f}s")
        print(f"üéì Valor Educativo M√©dio: {avg_educational_value:.1f}/5")
        
        print("\nüìã AN√ÅLISE POR CATEGORIA:")
        for category, results in categories.items():
            if results:
                category_success = sum(1 for r in results if r.success)
                category_total = len(results)
                category_rate = (category_success / category_total * 100) if category_total > 0 else 0
                print(f"   {category}: {category_success}/{category_total} ({category_rate:.1f}%)")
        
        print("\nüîß FUNCIONALIDADES MAIS TESTADAS:")
        api_usage = {}
        for result in self.results:
            for api in result.api_calls_detected:
                api_usage[api] = api_usage.get(api, 0) + 1
        
        for api, count in sorted(api_usage.items(), key=lambda x: x[1], reverse=True):
            print(f"   {api}: {count} testes")
        
        # An√°lise de equival√™ncia manual
        print("\nüéØ EQUIVAL√äNCIA COM FUNCIONALIDADES MANUAIS:")
        manual_functions = set(r.manual_equivalent.split(" ‚Üí ")[0] for r in self.results)
        for func in manual_functions:
            related_tests = [r for r in self.results if func in r.manual_equivalent]
            success_count = sum(1 for r in related_tests if r.success)
            print(f"   {func}: {success_count}/{len(related_tests)} testes bem-sucedidos")
        
        # Recomenda√ß√µes baseadas nos resultados
        print("\nüí° AN√ÅLISE DE CAPACIDADES DO CHAT:")
        
        if success_rate >= 90:
            print("   üéâ EXCELENTE: Chat consegue substituir a maioria das funcionalidades manuais")
            print("   ‚úÖ Usu√°rios podem usar o chat como interface principal")
            print("   üöÄ Pronto para lan√ßamento como copiloto financeiro")
        elif success_rate >= 75:
            print("   üëç BOM: Chat cobre a maioria dos casos de uso importantes")
            print("   üîß Algumas funcionalidades precisam de melhorias")
            print("   üìà Potencial para ser interface principal com ajustes")
        elif success_rate >= 50:
            print("   ‚ö†Ô∏è  M√âDIO: Chat funciona para casos b√°sicos")
            print("   üõ†Ô∏è  Precisa de desenvolvimento significativo")
            print("   üìö Foco em melhorar integra√ß√£o com APIs")
        else:
            print("   üö® BAIXO: Chat n√£o consegue substituir funcionalidades manuais adequadamente")
            print("   üîÑ Revis√£o completa da arquitetura necess√°ria")
            print("   üéØ Priorizar integra√ß√£o funcional antes de UX")
        
        print(f"\nüéØ CONCLUS√ÉO SOBRE PROPOSTA DE VALOR:")
        if success_rate >= 80 and avg_educational_value >= 3:
            print("   ‚úÖ PROPOSTA DE VALOR VALIDADA: Chat pode ser o 'copiloto financeiro' prometido")
            print("   üéì Valor educativo adequado para transformar iniciantes em estrategistas")
            print("   üíº Interface conversacional pode substituir navega√ß√£o manual complexa")
        else:
            print("   ‚ö†Ô∏è  PROPOSTA DE VALOR PARCIALMENTE VALIDADA")
            print("   üîß Melhorias necess√°rias para atingir vis√£o de 'copiloto financeiro'")
            print("   üìà Potencial existe, mas implementa√ß√£o precisa de ajustes")
        
        # Salvar relat√≥rio detalhado
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "execution_time": total_time,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "success_rate": success_rate,
                "average_response_time": avg_response_time,
                "average_educational_value": avg_educational_value
            },
            "category_analysis": {
                category: {
                    "total": len(results),
                    "passed": sum(1 for r in results if r.success),
                    "success_rate": (sum(1 for r in results if r.success) / len(results) * 100) if results else 0
                }
                for category, results in categories.items() if results
            },
            "api_usage": api_usage,
            "detailed_results": [
                {
                    "scenario": r.scenario,
                    "user_message": r.user_message,
                    "expected_functionality": r.expected_functionality,
                    "manual_equivalent": r.manual_equivalent,
                    "success": r.success,
                    "response_time": r.response_time,
                    "api_calls_detected": r.api_calls_detected,
                    "educational_value": r.educational_value,
                    "error_message": r.error_message
                }
                for r in self.results
            ]
        }
        
        report_filename = f"chat_comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Relat√≥rio detalhado salvo em: {report_filename}")
        
        return success_rate >= 75 and avg_educational_value >= 3

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE ABRANGENTE DO CHAT VISTA ETF ASSISTANT")
    print("=" * 80)
    print("üéØ OBJETIVO: Validar se o chat consegue substituir todas as funcionalidades manuais")
    print("üìã CEN√ÅRIOS TESTADOS:")
    print("   ‚Ä¢ Cria√ß√£o e otimiza√ß√£o de portfolios")
    print("   ‚Ä¢ Pesquisa e an√°lise de ETFs")
    print("   ‚Ä¢ An√°lise de mercado e rankings")
    print("   ‚Ä¢ Gest√£o de portfolios existentes")
    print("   ‚Ä¢ Funcionalidades educativas")
    print("   ‚Ä¢ Cen√°rios complexos multi-funcionais")
    print()
    
    tester = ComprehensiveChatTester(BASE_URL)
    
    # Executar todos os testes
    tester.run_portfolio_creation_tests()
    tester.run_etf_research_tests()
    tester.run_market_analysis_tests()
    tester.run_portfolio_management_tests()
    tester.run_educational_tests()
    tester.run_complex_scenarios_tests()
    
    # Gerar relat√≥rio final
    success = tester.generate_comprehensive_report()
    
    # C√≥digo de sa√≠da
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 