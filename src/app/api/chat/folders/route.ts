import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// GET - Buscar todas as pastas do usu√°rio
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const includeItems = searchParams.get('includeItems') === 'true';

    if (!userId) {
      return NextResponse.json({ error: 'userId √© obrigat√≥rio' }, { status: 400 });
    }

    console.log(`üìÅ Buscando pastas para usu√°rio: ${userId}`);

    // Query base para pastas
    let query = supabase
      .from('chat_folders')
      .select(`
        id,
        name,
        type,
        description,
        icon,
        color,
        position,
        is_default,
        is_custom,
        metadata,
        created_at,
        updated_at
        ${includeItems ? `, chat_folder_items(
          id,
          title,
          summary,
          content_type,
          is_favorite,
          is_archived,
          view_count,
          created_at,
          last_accessed
        )` : ''}
      `)
      .or(`user_id.eq.${userId},user_id.is.null`) // Pastas do usu√°rio + pastas padr√£o
      .order('position', { ascending: true });

    const { data: folders, error } = await query;

    if (error) {
      console.error('‚ùå Erro ao buscar pastas:', error);
      return NextResponse.json({ error: 'Erro ao buscar pastas' }, { status: 500 });
    }

    // Se n√£o tem pastas personalizadas, criar as padr√£o para o usu√°rio
    if (!folders || folders.length === 0) {
      await createDefaultFolders(userId);
      
      // Buscar novamente ap√≥s criar
      const { data: newFolders, error: newError } = await query;
      if (newError) {
        console.error('‚ùå Erro ao buscar pastas ap√≥s cria√ß√£o:', newError);
        return NextResponse.json({ error: 'Erro ao buscar pastas' }, { status: 500 });
      }
      
      console.log(`‚úÖ Pastas padr√£o criadas para usu√°rio: ${userId}`);
      return NextResponse.json({ folders: newFolders || [] });
    }

    console.log(`‚úÖ ${folders.length} pastas encontradas para usu√°rio: ${userId}`);
    return NextResponse.json({ folders });

  } catch (error) {
    console.error('‚ùå Erro interno ao buscar pastas:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}

// POST - Criar nova pasta personalizada
export async function POST(request: NextRequest) {
  try {
    const { userId, name, description, icon, color, type } = await request.json();

    if (!userId || !name) {
      return NextResponse.json({ 
        error: 'userId e name s√£o obrigat√≥rios' 
      }, { status: 400 });
    }

    console.log(`üìÅ Criando pasta personalizada: ${name} para usu√°rio: ${userId}`);

    // Buscar a maior posi√ß√£o atual
    const { data: maxPositionData } = await supabase
      .from('chat_folders')
      .select('position')
      .eq('user_id', userId)
      .order('position', { ascending: false })
      .limit(1);

    const nextPosition = (maxPositionData?.[0]?.position || 0) + 1;

    // Criar pasta personalizada
    const { data: folder, error } = await supabase
      .from('chat_folders')
      .insert({
        user_id: userId,
        name: name.substring(0, 100),
        type: type || 'custom',
        description: description?.substring(0, 500),
        icon: icon || 'üìÅ',
        color: color || '#3B82F6',
        position: nextPosition,
        is_default: false,
        is_custom: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao criar pasta:', error);
      return NextResponse.json({ error: 'Erro ao criar pasta' }, { status: 500 });
    }

    console.log(`‚úÖ Pasta criada: ${folder.id}`);
    return NextResponse.json({ folder });

  } catch (error) {
    console.error('‚ùå Erro interno ao criar pasta:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}

// PUT - Atualizar pasta
export async function PUT(request: NextRequest) {
  try {
    const { folderId, userId, name, description, icon, color, position } = await request.json();

    if (!folderId || !userId) {
      return NextResponse.json({ 
        error: 'folderId e userId s√£o obrigat√≥rios' 
      }, { status: 400 });
    }

    console.log(`üìÅ Atualizando pasta: ${folderId} para usu√°rio: ${userId}`);

    // Verificar se a pasta pertence ao usu√°rio
    const { data: existingFolder, error: checkError } = await supabase
      .from('chat_folders')
      .select('id, is_default')
      .eq('id', folderId)
      .eq('user_id', userId)
      .single();

    if (checkError || !existingFolder) {
      return NextResponse.json({ error: 'Pasta n√£o encontrada' }, { status: 404 });
    }

    // N√£o permitir editar pastas padr√£o (apenas customizadas)
    if (existingFolder.is_default) {
      return NextResponse.json({ 
        error: 'Pastas padr√£o n√£o podem ser editadas' 
      }, { status: 403 });
    }

    // Atualizar pasta
    const updateData: any = {};
    if (name) updateData.name = name.substring(0, 100);
    if (description !== undefined) updateData.description = description?.substring(0, 500);
    if (icon) updateData.icon = icon;
    if (color) updateData.color = color;
    if (position !== undefined) updateData.position = position;

    const { data: folder, error } = await supabase
      .from('chat_folders')
      .update(updateData)
      .eq('id', folderId)
      .eq('user_id', userId)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao atualizar pasta:', error);
      return NextResponse.json({ error: 'Erro ao atualizar pasta' }, { status: 500 });
    }

    console.log(`‚úÖ Pasta atualizada: ${folder.id}`);
    return NextResponse.json({ folder });

  } catch (error) {
    console.error('‚ùå Erro interno ao atualizar pasta:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}

// DELETE - Remover pasta personalizada
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const folderId = searchParams.get('folderId');
    const userId = searchParams.get('userId');

    if (!folderId || !userId) {
      return NextResponse.json({ 
        error: 'folderId e userId s√£o obrigat√≥rios' 
      }, { status: 400 });
    }

    console.log(`üìÅ Removendo pasta: ${folderId} para usu√°rio: ${userId}`);

    // Verificar se a pasta pertence ao usu√°rio e n√£o √© padr√£o
    const { data: existingFolder, error: checkError } = await supabase
      .from('chat_folders')
      .select('id, is_default, is_custom')
      .eq('id', folderId)
      .eq('user_id', userId)
      .single();

    if (checkError || !existingFolder) {
      return NextResponse.json({ error: 'Pasta n√£o encontrada' }, { status: 404 });
    }

    // N√£o permitir remover pastas padr√£o
    if (existingFolder.is_default || !existingFolder.is_custom) {
      return NextResponse.json({ 
        error: 'Pastas padr√£o n√£o podem ser removidas' 
      }, { status: 403 });
    }

    // Remover pasta (itens ser√£o removidos automaticamente por CASCADE)
    const { error } = await supabase
      .from('chat_folders')
      .delete()
      .eq('id', folderId)
      .eq('user_id', userId);

    if (error) {
      console.error('‚ùå Erro ao remover pasta:', error);
      return NextResponse.json({ error: 'Erro ao remover pasta' }, { status: 500 });
    }

    console.log(`‚úÖ Pasta removida: ${folderId}`);
    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå Erro interno ao remover pasta:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}

// Fun√ß√£o auxiliar para criar pastas padr√£o para novos usu√°rios
async function createDefaultFolders(userId: string) {
  const defaultFolders = [
    {
      user_id: userId,
      name: 'Portf√≥lios',
      type: 'portfolios',
      description: 'An√°lises e simula√ß√µes de carteiras de investimento',
      icon: 'üíº',
      position: 1,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Compara√ß√µes',
      type: 'comparisons',
      description: 'Comparativos entre ETFs e fundos',
      icon: '‚öñÔ∏è',
      position: 2,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Screeners & Pesquisas',
      type: 'screeners',
      description: 'Filtros e consultas de ETFs salvos',
      icon: 'üîç',
      position: 3,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Educa√ß√£o & Explica√ß√µes',
      type: 'education',
      description: 'Conceitos e explica√ß√µes sobre investimentos',
      icon: 'üìñ',
      position: 4,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Compras & Opera√ß√µes',
      type: 'operations',
      description: 'Simula√ß√µes de compra e venda',
      icon: 'üõí',
      position: 5,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Relat√≥rios & Alertas',
      type: 'reports',
      description: 'Relat√≥rios gerados e alertas configurados',
      icon: 'üìë',
      position: 6,
      is_default: true
    },
    {
      user_id: userId,
      name: 'Favoritos',
      type: 'favorites',
      description: 'Itens marcados como favoritos',
      icon: '‚≠ê',
      position: 7,
      is_default: true
    }
  ];

  const { error } = await supabase
    .from('chat_folders')
    .insert(defaultFolders);

  if (error) {
    console.error('‚ùå Erro ao criar pastas padr√£o:', error);
    throw error;
  }
} 