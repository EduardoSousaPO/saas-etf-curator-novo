import { APIResult, UserIntent, FormattedResponse, UserContext } from '../../types/agents';
import { getLLMService } from '../../lib/ai/llm-integration';

export class WriterAgent {
  private llmService: any;

  constructor() {
    this.llmService = getLLMService();
    console.log('‚úçÔ∏è WriterAgent inicializado com GPT-4');
  }

  async formatResponse(apiResult: APIResult, intent: UserIntent, context?: UserContext): Promise<FormattedResponse> {
    try {
      console.log(`‚úçÔ∏è Formatando resposta: ${intent}`, {
        success: apiResult.success,
        hasData: !!apiResult.data
      });

      let formattedContent = '';
      let insights: string[] = [];

      if (!apiResult.success) {
        return this.formatErrorResponse(apiResult, intent, context);
      }

      // Usar GPT-4 para formata√ß√£o da resposta
      try {
        formattedContent = await this.llmService.formatResponse(apiResult.data, intent, context);
        insights = await this.generateInsightsWithGPT(apiResult.data, intent);
      } catch (llmError) {
        console.warn('‚ö†Ô∏è Erro no GPT-4, usando formata√ß√£o de fallback:', llmError);
        // Fallback para formata√ß√£o baseada em templates
        formattedContent = await this.formatResponseFallback(apiResult.data, intent);
        insights = this.generateInsightsFallback(apiResult.data, intent);
      }

      const nextSteps = this.suggestNextSteps(intent, apiResult.data, context);

      return {
        content: formattedContent,
        insights,
        nextSteps,
        metadata: {
          intent,
          timestamp: new Date().toISOString(),
          dataSource: apiResult.source,
          userPlan: context?.subscriptionPlan,
          processingTime: apiResult.processingTime,
          llmUsed: true
        }
      };

    } catch (error) {
      console.error('‚ùå Erro na formata√ß√£o da resposta:', error);
      return this.formatErrorResponse({
        success: false,
        data: { error: error instanceof Error ? error.message : 'Erro desconhecido' },
        source: 'writer_agent',
        timestamp: new Date(),
        processingTime: 0
      }, intent, context);
    }
  }

  private async generateInsightsWithGPT(data: any, intent: UserIntent): Promise<string[]> {
    try {
      const systemPrompt = `Voc√™ √© um especialista em an√°lise de dados financeiros e ETFs.

Analise os dados fornecidos e gere 3-5 insights pr√°ticos e acion√°veis.

Diretrizes para insights:
1. Seja espec√≠fico e quantitativo quando poss√≠vel
2. Foque em informa√ß√µes que ajudem na tomada de decis√£o
3. Use linguagem clara e objetiva
4. Destaque riscos e oportunidades
5. Cada insight deve ser uma frase completa

Tipo de an√°lise: ${intent}
Dados: ${JSON.stringify(data, null, 2)}

Responda APENAS com um array JSON de strings:
["insight 1", "insight 2", "insight 3"]`;

      const response = await this.llmService.generateResponse({
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Gere os insights baseados nos dados fornecidos.' }
        ],
        temperature: 0.7,
        maxTokens: 500
      });

      const parsed = JSON.parse(response.content);
      return Array.isArray(parsed) ? parsed.slice(0, 5) : [response.content];

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro na gera√ß√£o de insights com GPT-4:', error);
      return this.generateInsightsFallback(data, intent);
    }
  }

  // Fallback para formata√ß√£o sem GPT-4
  private async formatResponseFallback(data: any, intent: UserIntent): Promise<string> {
    switch (intent) {
      case UserIntent.PORTFOLIO_OPTIMIZATION:
        return this.formatPortfolioOptimization(data);
      case UserIntent.ETF_SCREENING:
        return this.formatETFScreening(data);
      case UserIntent.ETF_COMPARISON:
        return this.formatETFComparison(data);
      case UserIntent.MARKET_ANALYSIS:
        return this.formatMarketAnalysis(data);
      case UserIntent.RANKINGS_ANALYSIS:
        return this.formatRankingsAnalysis(data);
      case UserIntent.EDUCATIONAL:
        return this.formatEducationalContent(data);
      case UserIntent.REBALANCING:
        return this.formatRebalancingAdvice(data);
      default:
        return this.formatGenericResponse(data);
    }
  }

  private async formatPortfolioOptimization(data: any): Promise<string> {
    const { portfolio, metrics, projections } = data;
    
    return `
## üìä Otimiza√ß√£o de Portfolio Conclu√≠da

### üéØ Composi√ß√£o Recomendada:
${portfolio.allocations.map((alloc: any) => 
  `‚Ä¢ **${alloc.symbol}** (${(alloc.percentage * 100).toFixed(1)}%): ${alloc.name}
    - Expense Ratio: ${(alloc.expense_ratio * 100).toFixed(2)}% a.a.
    - Retorno 12m: ${(alloc.returns_12m * 100).toFixed(1)}%
    - Volatilidade: ${(alloc.volatility * 100).toFixed(1)}%
    - Setor: ${alloc.sector}`
).join('\n\n')}

### üìà M√©tricas do Portfolio:
- **Retorno Esperado:** ${(metrics.expectedReturn * 100).toFixed(1)}% ao ano
- **Volatilidade:** ${(metrics.volatility * 100).toFixed(1)}%
- **√çndice Sharpe:** ${metrics.sharpeRatio.toFixed(2)}
- **Custo Total:** ${(metrics.totalExpenseRatio * 100).toFixed(2)}% ao ano
- **M√°ximo Drawdown:** ${(metrics.maxDrawdown * 100).toFixed(1)}%

### üîÆ Proje√ß√µes (12 meses):
- **Cen√°rio Pessimista (15%):** ${this.formatCurrency(projections.pessimistic)}
- **Cen√°rio Esperado (50%):** ${this.formatCurrency(projections.expected)}
- **Cen√°rio Otimista (85%):** ${this.formatCurrency(projections.optimistic)}

### üí° Justificativa:
Esta composi√ß√£o foi otimizada usando a **Teoria Moderna de Portf√≥lio de Markowitz**, balanceando risco e retorno de acordo com seu perfil. A diversifica√ß√£o entre diferentes classes de ativos e regi√µes geogr√°ficas oferece prote√ß√£o contra volatilidade excessiva.

${this.getInvestmentDisclaimer()}
    `;
  }

  private async formatETFScreening(data: any): Promise<string> {
    const { etfs, totalCount, appliedFilters } = data;
    
    return `
## üîç Resultados do Screening de ETFs

**${totalCount} ETFs encontrados** com os filtros aplicados.

### üèÜ Top ETFs Recomendados:
${etfs.slice(0, 10).map((etf: any, index: number) => 
  `${index + 1}. **${etf.symbol}** - ${etf.name}
     ‚Ä¢ Patrim√¥nio: ${this.formatCurrency(etf.totalasset)}
     ‚Ä¢ Expense Ratio: ${(etf.expense_ratio * 100).toFixed(2)}%
     ‚Ä¢ Retorno 12m: ${(etf.returns_12m * 100).toFixed(1)}%
     ‚Ä¢ Dividend Yield: ${(etf.dividend_yield * 100).toFixed(1)}%
     ‚Ä¢ Volatilidade: ${(etf.volatility * 100).toFixed(1)}%
     ‚Ä¢ Setor: ${etf.sector || 'N/A'}`
).join('\n\n')}

### üéØ Filtros Aplicados:
${this.formatAppliedFilters(appliedFilters)}

### üìä An√°lise dos Resultados:
Os ETFs listados foram selecionados com base em crit√©rios quantitativos rigorosos, priorizando **baixos custos**, **boa liquidez** e **performance consistente**. Todos atendem aos filtros especificados e representam op√ß√µes s√≥lidas para investimento.

${this.getInvestmentDisclaimer()}
    `;
  }

  private async formatETFComparison(data: any): Promise<string> {
    const { comparison } = data;
    
    return `
## ‚öñÔ∏è Compara√ß√£o Detalhada de ETFs

### üìä Tabela Comparativa:
| M√©trica | ${comparison.map((etf: any) => `**${etf.symbol}**`).join(' | ')} |
|---------|${comparison.map(() => '----------').join('|')}|
| **Nome** | ${comparison.map((etf: any) => etf.name).join(' | ')} |
| **Expense Ratio** | ${comparison.map((etf: any) => `${(etf.expense_ratio * 100).toFixed(2)}%`).join(' | ')} |
| **Retorno 12m** | ${comparison.map((etf: any) => `${(etf.returns_12m * 100).toFixed(1)}%`).join(' | ')} |
| **Volatilidade** | ${comparison.map((etf: any) => `${(etf.volatility * 100).toFixed(1)}%`).join(' | ')} |
| **Dividend Yield** | ${comparison.map((etf: any) => `${(etf.dividend_yield * 100).toFixed(1)}%`).join(' | ')} |
| **Patrim√¥nio** | ${comparison.map((etf: any) => this.formatCurrency(etf.totalasset)).join(' | ')} |

### üéØ An√°lise Comparativa:
${this.generateComparisonAnalysis(comparison)}

### üèÜ Recomenda√ß√£o:
${this.generateComparisonRecommendation(comparison)}

${this.getInvestmentDisclaimer()}
    `;
  }

  private async formatMarketAnalysis(data: any): Promise<string> {
    const { marketMetrics, trends, sectors } = data;
    
    return `
## üìà An√°lise de Mercado de ETFs

### üìä M√©tricas Gerais:
- **Total de ETFs Analisados:** ${marketMetrics.totalETFs.toLocaleString()}
- **Patrim√¥nio Total:** ${this.formatCurrency(marketMetrics.totalAUM)}
- **Expense Ratio M√©dio:** ${(marketMetrics.avgExpenseRatio * 100).toFixed(2)}%
- **Retorno M√©dio 12m:** ${(marketMetrics.avgReturns12m * 100).toFixed(1)}%

### üî• Tend√™ncias Identificadas:
${trends.map((trend: any) => 
  `‚Ä¢ **${trend.category}:** ${trend.description}
    - Performance: ${(trend.performance * 100).toFixed(1)}%`
).join('\n')}

### üè≠ An√°lise Setorial:
${sectors.map((sector: any) => 
  `‚Ä¢ **${sector.name}:** ${sector.etfCount} ETFs dispon√≠veis
    - Retorno M√©dio: ${(sector.avgReturn * 100).toFixed(1)}%
    - Volatilidade M√©dia: ${(sector.avgVolatility * 100).toFixed(1)}%`
).join('\n')}

### üí° Insights de Mercado:
O mercado de ETFs continua em expans√£o, com foco crescente em **baixos custos** e **diversifica√ß√£o global**. Setores de tecnologia lideram em performance, enquanto bonds oferecem estabilidade em cen√°rios de incerteza.
    `;
  }

  private async formatRankingsAnalysis(data: any): Promise<string> {
    const { rankings, criteria, totalEvaluated } = data;
    
    return `
## üèÜ Rankings de ETFs

### üìä Crit√©rio de Avalia√ß√£o: ${this.translateCriteria(criteria)}
**${totalEvaluated} ETFs avaliados**

### ü•á Top Performers:
${rankings.map((etf: any, index: number) => 
  `${index + 1}. **${etf.symbol}** - ${etf.name}
     ‚Ä¢ Score: ${etf.score}/10
     ‚Ä¢ Retorno 12m: ${(etf.returns_12m * 100).toFixed(1)}%`
).join('\n')}

### üéØ Metodologia:
O ranking foi calculado considerando m√∫ltiplos fatores quantitativos, incluindo performance hist√≥rica, consist√™ncia de retornos, custos e liquidez. Os ETFs no topo demonstram excel√™ncia no crit√©rio selecionado.
    `;
  }

  private async formatEducationalContent(data: any): Promise<string> {
    const { query, type } = data;
    
    // Conte√∫do educativo baseado na query
    const educationalContent = this.generateEducationalExplanation(query);
    
    return `
## üéì Explica√ß√£o: ${query}

${educationalContent}

### üìö Conceitos Relacionados:
‚Ä¢ **Diversifica√ß√£o:** Redu√ß√£o de risco atrav√©s de m√∫ltiplos investimentos
‚Ä¢ **Expense Ratio:** Taxa anual cobrada pelo ETF
‚Ä¢ **Liquidez:** Facilidade de compra e venda
‚Ä¢ **Tracking Error:** Diferen√ßa entre ETF e seu √≠ndice de refer√™ncia

### üí° Exemplo Pr√°tico:
${this.generatePracticalExample(query)}

### üìñ Para Saber Mais:
Explore nossa se√ß√£o de **Rankings** para ver ETFs que exemplificam esses conceitos, ou use o **Screener** para encontrar ETFs espec√≠ficos.
    `;
  }

  private async formatRebalancingAdvice(data: any): Promise<string> {
    return `
## ‚öñÔ∏è Sugest√µes de Rebalanceamento

### üìä An√°lise Atual:
Seu portfolio ser√° analisado para identificar desvios da aloca√ß√£o ideal.

### üéØ Recomenda√ß√µes:
‚Ä¢ Revisar aloca√ß√µes trimestralmente
‚Ä¢ Rebalancear quando desvio > 5% da aloca√ß√£o target
‚Ä¢ Considerar custos de transa√ß√£o
‚Ä¢ Usar novos aportes para rebalanceamento

### üí° Estrat√©gia:
O rebalanceamento sistem√°tico ajuda a manter o perfil de risco desejado e pode melhorar retornos de longo prazo atrav√©s da disciplina de "comprar baixo, vender alto".
    `;
  }

  private async formatGenericResponse(data: any): Promise<string> {
    return `
## ‚úÖ Processamento Conclu√≠do

${JSON.stringify(data, null, 2)}

An√°lise processada com sucesso. Para mais detalhes, utilize funcionalidades espec√≠ficas como Portfolio Master, Screener ou Rankings.
    `;
  }

  private formatErrorResponse(apiResult: APIResult, intent: UserIntent, context?: UserContext): FormattedResponse {
    const errorData = apiResult.data as any;
    
    let content = '';
    let insights: string[] = [];
    let nextSteps: string[] = [];

    if (errorData?.error === 'PERMISSION_DENIED') {
      content = `
## üîí Acesso Restrito

A funcionalidade **${this.translateIntent(intent)}** n√£o est√° dispon√≠vel no seu plano atual (**${errorData.currentPlan}**).

### üöÄ Para Acessar Esta Funcionalidade:
Fa√ßa upgrade para o plano **${errorData.requiredPlan}** e desbloqueie:
‚Ä¢ An√°lises avan√ßadas de portfolio
‚Ä¢ Otimiza√ß√£o cient√≠fica de investimentos  
‚Ä¢ Ferramentas profissionais de rebalanceamento
‚Ä¢ Relat√≥rios personalizados

[üî• **Fazer Upgrade Agora**](${errorData.upgradeUrl})
      `;
      
      insights = [
        `Plano atual: ${errorData.currentPlan}`,
        `Plano necess√°rio: ${errorData.requiredPlan}`,
        'Upgrade dispon√≠vel com benef√≠cios imediatos'
      ];
      
      nextSteps = [
        'Considerar upgrade do plano',
        'Explorar funcionalidades gratuitas',
        'Entrar em contato para mais informa√ß√µes'
      ];
    } else {
      content = `
## ‚ùå Erro no Processamento

Ocorreu um problema ao processar sua solicita√ß√£o:
**${errorData?.message || 'Erro desconhecido'}**

### üîß Poss√≠veis Solu√ß√µes:
‚Ä¢ Tente reformular sua pergunta
‚Ä¢ Verifique sua conex√£o com a internet
‚Ä¢ Aguarde alguns momentos e tente novamente

Se o problema persistir, nossa equipe de suporte est√° dispon√≠vel para ajudar.
      `;
      
      insights = ['Erro tempor√°rio detectado', 'Sistema em funcionamento normal'];
      nextSteps = ['Tentar novamente', 'Reformular pergunta', 'Contatar suporte'];
    }

    return {
      content,
      insights,
      nextSteps,
      metadata: {
        intent,
        timestamp: new Date().toISOString(),
        isError: true,
        errorCode: errorData?.error,
        userPlan: context?.subscriptionPlan,
        llmUsed: false
      }
    };
  }

  // M√©todos auxiliares para gera√ß√£o de insights (fallback)
  private generateInsightsFallback(data: any, intent: UserIntent): string[] {
    const insights: string[] = [];
    
    switch (intent) {
      case UserIntent.PORTFOLIO_OPTIMIZATION:
        const { metrics, portfolio } = data;
        if (metrics.sharpeRatio > 1.0) {
          insights.push('üìà Excelente rela√ß√£o risco-retorno (Sharpe > 1.0)');
        }
        if (metrics.totalExpenseRatio < 0.005) {
          insights.push('üí∞ Portfolio com custos muito baixos (< 0.5% a.a.)');
        }
        if (portfolio.allocations.length >= 4) {
          insights.push('üéØ Boa diversifica√ß√£o com m√∫ltiplas classes de ativos');
        }
        break;

      case UserIntent.ETF_SCREENING:
        const { totalCount, etfs } = data;
        if (totalCount > 50) {
          insights.push('üîç Muitas op√ß√µes encontradas - considere filtros mais espec√≠ficos');
        } else if (totalCount < 5) {
          insights.push('‚ö†Ô∏è Poucos resultados - considere relaxar alguns filtros');
        } else {
          insights.push('‚úÖ N√∫mero ideal de op√ß√µes para an√°lise detalhada');
        }
        break;

      default:
        insights.push('üìä An√°lise processada com sucesso');
        insights.push('üí° Dados organizados para tomada de decis√£o');
    }
    
    return insights.length > 0 ? insights : ['An√°lise conclu√≠da com sucesso'];
  }

  private suggestNextSteps(intent: UserIntent, data: any, context?: UserContext): string[] {
    const baseSteps: Record<UserIntent, string[]> = {
      [UserIntent.PORTFOLIO_OPTIMIZATION]: [
        'Revisar a aloca√ß√£o sugerida',
        'Simular diferentes cen√°rios de risco',
        'Considerar implementa√ß√£o gradual',
        'Agendar revis√£o trimestral'
      ],
      [UserIntent.ETF_SCREENING]: [
        'Analisar detalhes dos ETFs selecionados',
        'Comparar com benchmarks relevantes',
        'Verificar hist√≥rico de performance',
        'Avaliar adequa√ß√£o ao seu perfil'
      ],
      [UserIntent.ETF_COMPARISON]: [
        'Aprofundar an√°lise do ETF recomendado',
        'Verificar correla√ß√£o com portfolio atual',
        'Considerar custos de transa√ß√£o',
        'Avaliar timing de entrada'
      ],
      [UserIntent.MARKET_ANALYSIS]: [
        'Monitorar tend√™ncias identificadas',
        'Ajustar portfolio conforme insights',
        'Acompanhar setores em destaque',
        'Revisar estrat√©gia de aloca√ß√£o'
      ],
      [UserIntent.EDUCATIONAL]: [
        'Aplicar conceito na pr√°tica',
        'Explorar temas relacionados',
        'Usar ferramentas de screening',
        'Buscar exemplos no mercado'
      ],
      [UserIntent.RANKINGS_ANALYSIS]: [
        'Investigar ETFs top-ranked',
        'Comparar com holdings atuais',
        'Analisar metodologia do ranking',
        'Considerar diversifica√ß√£o'
      ],
      [UserIntent.REBALANCING]: [
        'Calcular custos de rebalanceamento',
        'Definir cronograma de revis√£o',
        'Implementar gradualmente',
        'Monitorar desvios futuros'
      ],
      [UserIntent.PROJECT_MANAGEMENT]: [
        'Salvar configura√ß√µes',
        'Definir alertas',
        'Agendar revis√µes',
        'Documentar estrat√©gia'
      ],
      [UserIntent.ERROR]: [
        'Tentar novamente',
        'Reformular pergunta',
        'Contatar suporte'
      ]
    };

    return baseSteps[intent] || ['Explorar mais funcionalidades', 'Consultar especialista'];
  }

  // M√©todos utilit√°rios (mantidos do c√≥digo original)
  private formatCurrency(value: number, currency: string = 'USD'): string {
    if (value >= 1e12) {
      return `$${(value / 1e12).toFixed(1)}T`;
    } else if (value >= 1e9) {
      return `$${(value / 1e9).toFixed(1)}B`;
    } else if (value >= 1e6) {
      return `$${(value / 1e6).toFixed(1)}M`;
    } else if (value >= 1e3) {
      return `$${(value / 1e3).toFixed(1)}K`;
    } else {
      return `$${value.toFixed(2)}`;
    }
  }

  private formatAppliedFilters(filters: any): string {
    const filterDescriptions: string[] = [];
    
    if (filters.sector) filterDescriptions.push(`Setor: ${filters.sector}`);
    if (filters.maxExpenseRatio) filterDescriptions.push(`Taxa m√°xima: ${(filters.maxExpenseRatio * 100).toFixed(2)}%`);
    if (filters.minAUM) filterDescriptions.push(`Patrim√¥nio m√≠nimo: ${this.formatCurrency(filters.minAUM)}`);
    if (filters.sortBy) filterDescriptions.push(`Ordenado por: ${this.translateSortBy(filters.sortBy)}`);
    
    return filterDescriptions.length > 0 
      ? filterDescriptions.map(desc => `‚Ä¢ ${desc}`).join('\n')
      : '‚Ä¢ Nenhum filtro espec√≠fico aplicado';
  }

  private generateComparisonAnalysis(comparison: any[]): string {
    const analysis: string[] = [];
    
    // An√°lise de performance
    const bestPerformer = comparison.reduce((best, current) => 
      current.returns_12m > best.returns_12m ? current : best
    );
    analysis.push(`**Performance:** ${bestPerformer.symbol} lidera com ${(bestPerformer.returns_12m * 100).toFixed(1)}% em 12 meses.`);
    
    // An√°lise de custos
    const cheapest = comparison.reduce((lowest, current) => 
      current.expense_ratio < lowest.expense_ratio ? current : lowest
    );
    analysis.push(`**Custos:** ${cheapest.symbol} oferece a menor taxa (${(cheapest.expense_ratio * 100).toFixed(2)}%).`);
    
    // An√°lise de tamanho
    const largest = comparison.reduce((biggest, current) => 
      current.totalasset > biggest.totalasset ? current : biggest
    );
    analysis.push(`**Liquidez:** ${largest.symbol} possui maior patrim√¥nio (${this.formatCurrency(largest.totalasset)}).`);
    
    return analysis.join('\n\n');
  }

  private generateComparisonRecommendation(comparison: any[]): string {
    // L√≥gica simples de recomenda√ß√£o baseada em score composto
    const scored = comparison.map(etf => ({
      ...etf,
      score: (etf.returns_12m * 0.4) + ((1 - etf.expense_ratio) * 0.3) + ((etf.totalasset / 1e12) * 0.3)
    }));
    
    const recommended = scored.reduce((best, current) => 
      current.score > best.score ? current : best
    );
    
    return `Baseado na an√°lise de **performance**, **custos** e **liquidez**, recomendamos **${recommended.symbol}** como a op√ß√£o mais equilibrada para a maioria dos investidores.`;
  }

  private generateEducationalExplanation(query: string): string {
    const explanations: Record<string, string> = {
      'expense ratio': `
**Expense Ratio** √© a taxa anual cobrada por um ETF para cobrir seus custos operacionais, expressa como percentual do patrim√¥nio.

### Como Funciona:
‚Ä¢ **0.03%** = R$ 3 por ano para cada R$ 10.000 investidos
‚Ä¢ **0.50%** = R$ 50 por ano para cada R$ 10.000 investidos

### Por que Importa:
‚Ä¢ Impacta diretamente seu retorno l√≠quido
‚Ä¢ Diferen√ßa de 0.20% pode representar milhares de reais ao longo do tempo
‚Ä¢ ETFs passivos geralmente t√™m custos menores que fundos ativos

### Benchmark:
‚Ä¢ **Excelente:** < 0.10%
‚Ä¢ **Bom:** 0.10% - 0.30%  
‚Ä¢ **Aceit√°vel:** 0.30% - 0.60%
‚Ä¢ **Alto:** > 0.60%
      `,
      'dividend yield': `
**Dividend Yield** representa a rentabilidade anual dos dividendos pagos por um ETF, expressa como percentual do pre√ßo atual.

### C√°lculo:
Dividend Yield = (Dividendos Anuais √∑ Pre√ßo Atual) √ó 100

### Caracter√≠sticas:
‚Ä¢ **ETFs de Dividendos:** 2% - 6% t√≠pico
‚Ä¢ **ETFs de Crescimento:** 0% - 2% t√≠pico
‚Ä¢ **REITs ETFs:** 3% - 8% t√≠pico

### Considera√ß√µes:
‚Ä¢ Yield alto pode indicar pre√ßo deprimido
‚Ä¢ Foque na sustentabilidade dos dividendos
‚Ä¢ Considere crescimento dos dividendos ao longo do tempo
      `,
      'volatilidade': `
**Volatilidade** mede a varia√ß√£o dos pre√ßos de um investimento ao longo do tempo, indicando o n√≠vel de risco.

### Interpreta√ß√£o:
‚Ä¢ **Baixa (< 15%):** Investimentos mais est√°veis
‚Ä¢ **Moderada (15% - 25%):** Risco equilibrado
‚Ä¢ **Alta (> 25%):** Maior potencial de ganhos e perdas

### Tipos:
‚Ä¢ **Hist√≥rica:** Baseada em dados passados
‚Ä¢ **Impl√≠cita:** Expectativa do mercado para o futuro

### Aplica√ß√£o Pr√°tica:
‚Ä¢ Use para dimensionar posi√ß√£o no portfolio
‚Ä¢ Combine ativos de diferentes volatilidades
‚Ä¢ Considere seu horizonte de investimento
      `
    };
    
    const key = Object.keys(explanations).find(k => query.toLowerCase().includes(k));
    return key ? explanations[key] : `
**${query}** √© um conceito importante no mundo dos investimentos em ETFs.

Esta explica√ß√£o detalhada ser√° desenvolvida com base em pesquisas atualizadas e melhores pr√°ticas do mercado. 

Para informa√ß√µes mais espec√≠ficas, utilize nossas ferramentas de **Screener** e **Compara√ß√£o** para ver exemplos pr√°ticos deste conceito aplicado a ETFs reais.
    `;
  }

  private generatePracticalExample(query: string): string {
    if (query.toLowerCase().includes('expense ratio')) {
      return `
**Exemplo:** Comparando dois ETFs similares:
‚Ä¢ **ETF A:** Expense ratio 0.03% - Custo anual de R$ 30 para R$ 100.000
‚Ä¢ **ETF B:** Expense ratio 0.75% - Custo anual de R$ 750 para R$ 100.000

**Diferen√ßa:** R$ 720 por ano, que ao longo de 20 anos pode representar mais de R$ 20.000 em custos adicionais!
      `;
    }
    
    return `Utilize nosso **Screener** para encontrar ETFs que exemplificam este conceito na pr√°tica.`;
  }

  private translateIntent(intent: UserIntent): string {
    const translations: Record<UserIntent, string> = {
      [UserIntent.PORTFOLIO_OPTIMIZATION]: 'Otimiza√ß√£o de Portfolio',
      [UserIntent.ETF_SCREENING]: 'Screening de ETFs',
      [UserIntent.ETF_COMPARISON]: 'Compara√ß√£o de ETFs',
      [UserIntent.MARKET_ANALYSIS]: 'An√°lise de Mercado',
      [UserIntent.EDUCATIONAL]: 'Conte√∫do Educativo',
      [UserIntent.RANKINGS_ANALYSIS]: 'An√°lise de Rankings',
      [UserIntent.REBALANCING]: 'Rebalanceamento',
      [UserIntent.PROJECT_MANAGEMENT]: 'Gest√£o de Projetos',
      [UserIntent.ERROR]: 'Erro do Sistema'
    };
    
    return translations[intent] || intent;
  }

  private translateCriteria(criteria: string): string {
    const translations: Record<string, string> = {
      'returns_12m': 'Retorno 12 Meses',
      'sharpe_ratio': '√çndice Sharpe',
      'expense_ratio': 'Taxa de Administra√ß√£o',
      'dividend_yield': 'Dividend Yield',
      'volatilidade': 'Volatilidade'
    };
    
    return translations[criteria] || criteria;
  }

  private translateSortBy(sortBy: string): string {
    const translations: Record<string, string> = {
      'returns_12m': 'Retorno 12m',
      'expense_ratio': 'Taxa de Administra√ß√£o',
      'totalasset': 'Patrim√¥nio',
      'dividend_yield': 'Dividend Yield',
      'volatilidade': 'Volatilidade'
    };
    
    return translations[sortBy] || sortBy;
  }

  // Health check
  private getInvestmentDisclaimer(): string {
    return `
---
‚ö†Ô∏è **IMPORTANTE - DISCLAIMER DE INVESTIMENTOS:**
*Esta an√°lise √© apenas para fins educacionais e informativos. N√£o constitui consultoria de investimento, recomenda√ß√£o de compra ou venda de valores mobili√°rios. Investimentos em ETFs envolvem riscos, incluindo poss√≠vel perda do capital investido. Rentabilidade passada n√£o garante resultados futuros. Consulte sempre um profissional qualificado antes de tomar decis√µes de investimento.*
    `;
  }

  getStatus(): { status: string; timestamp: string; llmProvider?: string } {
    const llmStats = this.llmService?.getStats();
    
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      llmProvider: llmStats?.provider || 'GPT-4'
    };
  }
} 