#!/usr/bin/env python3
"""
Executor direto de SQL via conex√£o PostgreSQL
Aplica lotes diretamente no Supabase sem depender do MCP
"""

import os
import json
import time
import subprocess
from datetime import datetime

class DirectSQLExecutor:
    def __init__(self):
        self.start_time = datetime.now()
        self.execution_log = []
        
        # Configura√ß√µes do Supabase (usar vari√°veis de ambiente em produ√ß√£o)
        self.db_config = {
            'host': 'aws-0-sa-east-1.pooler.supabase.com',
            'port': '5432',
            'database': 'postgres',
            'user': 'postgres.kpjbshzqpqnbdxvtgzau',
            # Senha deve ser fornecida via vari√°vel de ambiente
            'password': os.getenv('SUPABASE_DB_PASSWORD', '')
        }
        
    def log_event(self, event_type, message, data=None):
        """Registra eventos da execu√ß√£o"""
        event = {
            'timestamp': datetime.now().isoformat(),
            'elapsed_seconds': (datetime.now() - self.start_time).total_seconds(),
            'type': event_type,
            'message': message,
            'data': data or {}
        }
        self.execution_log.append(event)
        print(f"[{event['elapsed_seconds']:.1f}s] {event_type}: {message}")
        
    def create_connection_string(self):
        """Cria string de conex√£o PostgreSQL"""
        if not self.db_config['password']:
            self.log_event("CONFIG_ERROR", "‚ùå Senha do banco n√£o configurada (SUPABASE_DB_PASSWORD)")
            return None
            
        conn_str = (
            f"postgresql://{self.db_config['user']}:{self.db_config['password']}"
            f"@{self.db_config['host']}:{self.db_config['port']}/{self.db_config['database']}"
        )
        return conn_str
        
    def test_connection(self):
        """Testa conex√£o com o banco"""
        self.log_event("CONNECTION_TEST", "Testando conex√£o direta com Supabase")
        
        conn_str = self.create_connection_string()
        if not conn_str:
            return False
            
        try:
            # Tentar conex√£o via psql
            cmd = ['psql', conn_str, '-c', 'SELECT COUNT(*) FROM stocks_ativos_reais;']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                count = result.stdout.strip().split('\n')[-2].strip()
                self.log_event("CONNECTION_SUCCESS", f"‚úÖ Conex√£o OK - {count} a√ß√µes no banco")
                return True
            else:
                self.log_event("CONNECTION_ERROR", f"‚ùå Erro psql: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_event("CONNECTION_ERROR", "‚ùå Timeout na conex√£o")
            return False
        except FileNotFoundError:
            self.log_event("CONNECTION_ERROR", "‚ùå psql n√£o encontrado - tentando m√©todo alternativo")
            return self.test_connection_python()
        except Exception as e:
            self.log_event("CONNECTION_ERROR", f"‚ùå Erro inesperado: {str(e)}")
            return False
            
    def test_connection_python(self):
        """Testa conex√£o usando psycopg2 (se dispon√≠vel)"""
        try:
            import psycopg2
            
            conn_str = self.create_connection_string()
            if not conn_str:
                return False
                
            with psycopg2.connect(conn_str) as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT COUNT(*) FROM stocks_ativos_reais;")
                    count = cur.fetchone()[0]
                    self.log_event("CONNECTION_SUCCESS", f"‚úÖ Conex√£o Python OK - {count} a√ß√µes no banco")
                    return True
                    
        except ImportError:
            self.log_event("CONNECTION_ERROR", "‚ùå psycopg2 n√£o instalado")
            return False
        except Exception as e:
            self.log_event("CONNECTION_ERROR", f"‚ùå Erro Python: {str(e)}")
            return False
            
    def execute_sql_file_psql(self, sql_file):
        """Executa arquivo SQL via psql"""
        self.log_event("SQL_EXECUTION", f"Executando {sql_file} via psql")
        
        conn_str = self.create_connection_string()
        if not conn_str:
            return {'success': False, 'error': 'Conex√£o n√£o dispon√≠vel'}
            
        try:
            cmd = ['psql', conn_str, '-f', sql_file]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                self.log_event("SQL_SUCCESS", f"‚úÖ {sql_file} executado com sucesso")
                return {
                    'success': True,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
            else:
                self.log_event("SQL_ERROR", f"‚ùå Erro executando {sql_file}: {result.stderr}")
                return {
                    'success': False,
                    'error': result.stderr,
                    'stdout': result.stdout
                }
                
        except subprocess.TimeoutExpired:
            self.log_event("SQL_ERROR", f"‚ùå Timeout executando {sql_file}")
            return {'success': False, 'error': 'Timeout'}
        except Exception as e:
            self.log_event("SQL_ERROR", f"‚ùå Erro inesperado: {str(e)}")
            return {'success': False, 'error': str(e)}
            
    def execute_sql_file_python(self, sql_file):
        """Executa arquivo SQL via Python"""
        try:
            import psycopg2
            
            conn_str = self.create_connection_string()
            if not conn_str:
                return {'success': False, 'error': 'Conex√£o n√£o dispon√≠vel'}
                
            with open(sql_file, 'r', encoding='utf-8') as f:
                sql_content = f.read()
                
            with psycopg2.connect(conn_str) as conn:
                with conn.cursor() as cur:
                    cur.execute(sql_content)
                    conn.commit()
                    
            self.log_event("SQL_SUCCESS", f"‚úÖ {sql_file} executado via Python")
            return {'success': True}
            
        except ImportError:
            return {'success': False, 'error': 'psycopg2 n√£o dispon√≠vel'}
        except Exception as e:
            self.log_event("SQL_ERROR", f"‚ùå Erro Python: {str(e)}")
            return {'success': False, 'error': str(e)}
            
    def execute_batch_file(self, batch_file):
        """Executa um arquivo de lote"""
        self.log_event("BATCH_START", f"Iniciando execu√ß√£o de {batch_file}")
        
        # Tentar psql primeiro, depois Python
        result = self.execute_sql_file_psql(batch_file)
        
        if not result['success'] and 'psql n√£o encontrado' in str(result.get('error', '')):
            result = self.execute_sql_file_python(batch_file)
            
        return result
        
    def monitor_progress(self):
        """Monitora progresso atual do banco"""
        self.log_event("MONITORING", "Verificando progresso atual")
        
        conn_str = self.create_connection_string()
        if not conn_str:
            return {'error': 'Conex√£o n√£o dispon√≠vel'}
            
        try:
            # Tentar via psql
            cmd = ['psql', conn_str, '-t', '-c', 
                   'SELECT COUNT(*) as total FROM stocks_ativos_reais;']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                count = int(result.stdout.strip())
                self.log_event("PROGRESS", f"üìä Progresso atual: {count} a√ß√µes no banco")
                return {'total_stocks': count}
            else:
                return {'error': result.stderr}
                
        except Exception as e:
            return {'error': str(e)}
            
    def execute_all_batches(self):
        """Executa todos os lotes sint√©ticos"""
        self.log_event("BATCH_EXECUTION", "Iniciando execu√ß√£o de todos os lotes")
        
        # Verificar lotes dispon√≠veis
        batch_files = []
        for i in range(1, 9):
            batch_file = f"scripts/synthetic_batch_{i:03d}.sql"
            if os.path.exists(batch_file):
                batch_files.append(batch_file)
                
        self.log_event("BATCH_DISCOVERY", f"Encontrados {len(batch_files)} lotes")
        
        if not batch_files:
            self.log_event("BATCH_ERROR", "‚ùå Nenhum lote encontrado")
            return {'success': False, 'error': 'Nenhum lote encontrado'}
            
        # Testar conex√£o antes de come√ßar
        if not self.test_connection():
            self.log_event("BATCH_ERROR", "‚ùå Falha na conex√£o - abortando execu√ß√£o")
            return {'success': False, 'error': 'Falha na conex√£o'}
            
        # Executar lotes
        successful_batches = 0
        failed_batches = 0
        
        for i, batch_file in enumerate(batch_files, 1):
            self.log_event("BATCH_PROCESSING", f"Processando lote {i}/{len(batch_files)}: {batch_file}")
            
            result = self.execute_batch_file(batch_file)
            
            if result['success']:
                successful_batches += 1
                self.log_event("BATCH_SUCCESS", f"‚úÖ Lote {i} conclu√≠do com sucesso")
                
                # Monitorar progresso a cada 2 lotes
                if i % 2 == 0:
                    progress = self.monitor_progress()
                    if 'total_stocks' in progress:
                        self.log_event("PROGRESS_REPORT", f"üìà Total no banco: {progress['total_stocks']} a√ß√µes")
            else:
                failed_batches += 1
                self.log_event("BATCH_FAILURE", f"‚ùå Lote {i} falhou: {result.get('error', 'Erro desconhecido')}")
                
            # Pausa entre lotes
            time.sleep(2)
            
        # Resultado final
        final_progress = self.monitor_progress()
        
        return {
            'success': successful_batches > 0,
            'total_batches': len(batch_files),
            'successful_batches': successful_batches,
            'failed_batches': failed_batches,
            'final_stock_count': final_progress.get('total_stocks', 'unknown'),
            'execution_time': (datetime.now() - self.start_time).total_seconds()
        }

def main():
    """Fun√ß√£o principal"""
    print("üöÄ EXECUTOR DIRETO SQL - SUPABASE")
    print("=" * 50)
    
    # Verificar se senha est√° configurada
    if not os.getenv('SUPABASE_DB_PASSWORD'):
        print("‚ö†Ô∏è  ATEN√á√ÉO: Vari√°vel SUPABASE_DB_PASSWORD n√£o configurada")
        print("   Configure com: set SUPABASE_DB_PASSWORD=sua_senha")
        print("   Ou execute: $env:SUPABASE_DB_PASSWORD='sua_senha'")
        return
        
    executor = DirectSQLExecutor()
    
    try:
        executor.log_event("STARTUP", "Iniciando executor direto SQL")
        
        # Executar todos os lotes
        results = executor.execute_all_batches()
        
        # Relat√≥rio final
        print("\n" + "=" * 50)
        print("üìä RESUMO DA EXECU√á√ÉO:")
        print(f"   ‚úÖ Sucesso: {results['success']}")
        print(f"   üì¶ Lotes: {results['successful_batches']}/{results['total_batches']}")
        print(f"   üìà A√ß√µes no banco: {results['final_stock_count']}")
        print(f"   ‚è±Ô∏è  Tempo: {results['execution_time']:.1f}s")
        print("=" * 50)
        
        # Salvar relat√≥rio
        with open('scripts/direct_sql_execution_report.json', 'w', encoding='utf-8') as f:
            json.dump({
                'results': results,
                'execution_log': executor.execution_log
            }, f, indent=2, ensure_ascii=False)
            
        return results
        
    except Exception as e:
        executor.log_event("CRITICAL_ERROR", f"Erro cr√≠tico: {str(e)}")
        raise

if __name__ == "__main__":
    main()
