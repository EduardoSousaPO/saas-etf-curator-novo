#!/usr/bin/env python3
"""
Script otimizado para executar atualiza√ß√µes de dividendos em lotes
usando MCP Supabase de forma eficiente
"""

import os
import time
import json
from datetime import datetime

def get_batch_files():
    """Lista todos os arquivos batch_*.sql ordenados"""
    batch_files = []
    for filename in os.listdir('.'):
        if filename.startswith('batch_') and filename.endswith('_update.sql'):
            batch_num = int(filename.replace('batch_', '').replace('_update.sql', ''))
            batch_files.append((batch_num, filename))
    
    batch_files.sort(key=lambda x: x[0])
    return batch_files

def read_sql_file(filename):
    """L√™ o conte√∫do de um arquivo SQL"""
    with open(filename, 'r', encoding='utf-8') as f:
        return f.read().strip()

def create_mega_batch(start_batch, end_batch):
    """Cria um mega-batch combinando m√∫ltiplas queries"""
    batch_files = get_batch_files()
    
    # Filtrar batches no range
    selected_batches = [
        (num, filename) for num, filename in batch_files 
        if start_batch <= num <= end_batch
    ]
    
    if not selected_batches:
        return None
    
    # Combinar queries
    combined_queries = []
    for batch_num, filename in selected_batches:
        query = read_sql_file(filename)
        combined_queries.append(f"-- Batch {batch_num}\n{query}")
    
    return "\n\n".join(combined_queries)

def main():
    print("üöÄ EXECUTOR DE LOTES DE DIVIDENDOS")
    print("=" * 45)
    
    batch_files = get_batch_files()
    print(f"üìÅ Total de batches dispon√≠veis: {len(batch_files)}")
    
    if not batch_files:
        print("‚ùå Nenhum arquivo batch encontrado!")
        return
    
    print(f"   üìä Range: batch_001 at√© batch_{len(batch_files):03d}")
    
    # Op√ß√µes de execu√ß√£o
    print(f"\nüìã OP√á√ïES DE EXECU√á√ÉO:")
    print(f"   1. Executar todos os {len(batch_files)} batches")
    print(f"   2. Executar range espec√≠fico")
    print(f"   3. Criar mega-batch (combinar m√∫ltiplos)")
    print(f"   4. Executar pr√≥ximos 10 batches")
    print(f"   5. Status atual do banco")
    
    opcao = input(f"\nü§î Escolha uma op√ß√£o (1-5): ").strip()
    
    if opcao == "1":
        # Executar todos
        print(f"\n‚ö†Ô∏è  Executar TODOS os {len(batch_files)} batches?")
        if input("Confirma? (s/N): ").lower() not in ['s', 'sim']:
            print("‚ùå Cancelado")
            return
        
        print(f"üìù Execute as queries dos arquivos batch_001_update.sql at√© batch_{len(batch_files):03d}_update.sql")
        print(f"üí° Use MCP Supabase para cada arquivo")
        
    elif opcao == "2":
        # Range espec√≠fico
        start = int(input("Batch inicial (ex: 1): "))
        end = int(input("Batch final (ex: 10): "))
        
        mega_query = create_mega_batch(start, end)
        if mega_query:
            filename = f"mega_batch_{start:03d}_to_{end:03d}.sql"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(mega_query)
            print(f"‚úÖ Mega-batch criado: {filename}")
            print(f"üìù Execute este arquivo no MCP Supabase")
        else:
            print("‚ùå Range inv√°lido")
            
    elif opcao == "3":
        # Mega-batch customizado
        start = int(input("Batch inicial: "))
        end = int(input("Batch final: "))
        
        mega_query = create_mega_batch(start, end)
        if mega_query:
            filename = f"mega_batch_custom_{start:03d}_to_{end:03d}.sql"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(mega_query)
            print(f"‚úÖ Mega-batch customizado criado: {filename}")
            print(f"üìä Batches {start}-{end} combinados")
            print(f"üìù Execute este arquivo no MCP Supabase")
        else:
            print("‚ùå Range inv√°lido")
            
    elif opcao == "4":
        # Pr√≥ximos 10
        mega_query = create_mega_batch(3, 12)  # J√° executamos 1 e 2
        if mega_query:
            filename = "mega_batch_next_10.sql"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(mega_query)
            print(f"‚úÖ Pr√≥ximos 10 batches preparados: {filename}")
            print(f"üìä Batches 3-12 combinados")
            print(f"üìù Execute este arquivo no MCP Supabase")
        
    elif opcao == "5":
        # Status
        print(f"\nüìä VERIFICANDO STATUS DO BANCO...")
        print(f"üí° Execute esta query no MCP Supabase:")
        print(f"""
        SELECT 
            COUNT(*) as total_etfs,
            COUNT(CASE WHEN dividends_12m > 0 THEN 1 END) as etfs_com_dividendos,
            ROUND(COUNT(CASE WHEN dividends_12m > 0 THEN 1 END) * 100.0 / COUNT(*), 2) as percentual
        FROM etfs_ativos_reais;
        """)
        
    else:
        print("‚ùå Op√ß√£o inv√°lida")
        return
    
    print(f"\nüéØ Opera√ß√£o conclu√≠da!")

if __name__ == "__main__":
    main() 